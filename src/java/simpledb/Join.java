package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p;
    private OpIterator[] children;
    private int position;
    private List<Tuple> joinTuples;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p           = p;
        this.children    = new OpIterator[2];
        this.children[0] = child1;
        this.children[1] = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        //return null;
        return children[0].getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        //return null;
        return children[1].getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        //return null;
        return TupleDesc.merge(children[0].getTupleDesc(), children[1].getTupleDesc()); 
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        children[0].open();
        children[1].open();
        position = 0;
        joinTuples = new ArrayList<Tuple>();
        while(children[0].hasNext()) {
            Tuple lt = children[0].next();
            while(children[1].hasNext()) {
                Tuple rt = children[1].next();
                if (p.filter(lt, rt)) {
                    Tuple join = new Tuple(getTupleDesc());
                    for(int i = 0; i < lt.getTupleDesc().numFields(); i++) {
                        join.setField(i, lt.getField(i));
                    }
                    for(int i = lt.getTupleDesc().numFields(); i < lt.getTupleDesc().numFields() + rt.getTupleDesc().numFields(); i++) {
                        join.setField(i, rt.getField(i - lt.getTupleDesc().numFields()));
                    }
                    //System.out.println(join);
                    joinTuples.add(join);
                }
            }
            children[1].rewind();
        }
    }

    public void close() {
        // some code goes here
        super.close();
        children[0].close();
        children[1].close();
        joinTuples = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        children[0].rewind();
        children[1].rewind();
        position = 0;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        //return null;
        if (position < joinTuples.size()) {
            return joinTuples.get(position++);
        }
        else
            return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        //return null;
        return children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        children = children;
    }

}
